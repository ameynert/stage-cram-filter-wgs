/*
 * -------------------------------------------------
 *  ameynert/stage-cram-filter-wgs Nextflow config file
 * -------------------------------------------------
 */

// Global default params, used in configs
params {
  help = false
  input = "*.{bam,bai}"
  outdir = './output'
  targets = 'targets.bed'
  reference = 'reference.fa'
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

executor = "sge"
conda.createTimeout = '1h'

process {

  beforeScript = """
  . /etc/profile.d/modules.sh
  sleep 2;
  """
  module = 'anaconda/5.3.1'
  penv = "sharedmem"

  // Process-specific resource requirements
  withName: stage {
    maxForks = 10
    clusterOptions = "-q staging -l h_vmem=8G -l h_rt=6:00:00 -pe sharedmem 1"
  }
  withName: subset {
    clusterOptions = "-l h_vmem=16G -l h_rt=6:00:00 -pe sharedmem 1"
  }
  withName: cram {
    clusterOptions = "-l h_vmem=8G -l h_rt=2:00:00 -pe sharedmem 8"
  }
}

report {
  enabled = true
  file = "${params.tracedir}/report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/trace.txt"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
